<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Ishara Abeykoon</title>
		<link>https://arcslash.com/posts/</link>
		<description>Recent content in Posts on Ishara Abeykoon</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 07 Aug 2021 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://arcslash.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Deploying Pretrained Custom Keras Model Using Amazon Sagemaker</title>
			<link>https://arcslash.com/posts/2021-08-07-aws-sagemaker/</link>
			<pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
			
			<guid>https://arcslash.com/posts/2021-08-07-aws-sagemaker/</guid>
			<description>How to successfully deploy a custom machine learning model developed in keras to sagemaker for inference</description>
			<content type="html"><![CDATA[<p>This guide may differ on different on the newest versions of sagemaker sdk and tensorflow at the time of writing the latest
tensorflow version is 2.5 since only tensorflow 2.1.0 had solid support and compatability in deployments tensorflow 2.1.0 will be used in here.</p>
<p>TL;DR:</p>
<p>You can find the jupyter notebook related to this in <a href="https://colab.research.google.com/drive/1wRkxhViDGLob32VthovOFtLawTvsir0C?usp=sharing">here</a> which explains step by steps to follow</p>
<h2 id="getting-things-ready---things-to-note">Getting Things Ready - Things to note</h2>
<h3 id="versions-in-use">Versions in use</h3>
<ul>
<li>Tensorflow 2.1.0</li>
<li>Sagemaker SDK 2.52.1</li>
</ul>
<h3 id="training-the-custom-model">Training the custom Model</h3>
<p>Here in the notebook, we&rsquo;ll use inbuilt functions in keras to simplify and easily carry out training.</p>
<p>So, I will make a small classifier to identify cats and dogs.</p>
<h4 id="dataset">Dataset</h4>
<p>Usually, the 1st thing I&rsquo;ll check is what data i have and in what format they are in, so as the 1st step in here. I&rsquo;ll be collecting data of different cats and dogs and will be adding them into two folders cat and dog separately.</p>
<pre><code>.
+-- notebook.ipynb
+-- data/
|   +-- train/
|       +-- cat/
|       +-- dog/
</code></pre><p>Then we&rsquo;ll be loading these images using keras ImageDataGenerator. Here we can split data into training and validation sets using <code>validation_split</code> option in ImageDataGenerator of keras. I&rsquo;ll be separating training and validation images as 80% and 20% respectively. (<code>validation_split=0.2</code>)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">train_datagen</span> <span class="o">=</span> ImageDataGenerator<span class="o">(</span><span class="nv">rescale</span><span class="o">=</span>1./255,
    <span class="nv">shear_range</span><span class="o">=</span>0.2,
    <span class="nv">horizontal_flip</span><span class="o">=</span>True,
    <span class="nv">rotation_range</span><span class="o">=</span>90,                           
    <span class="nv">validation_split</span><span class="o">=</span>0.2<span class="o">)</span>

<span class="nv">train_dataset</span> <span class="o">=</span> train_datagen.flow_from_directory<span class="o">(</span><span class="s2">&#34;data/train&#34;</span>,
                                          <span class="nv">target_size</span><span class="o">=</span>target_size,
                                          <span class="nv">batch_size</span> <span class="o">=</span> batch_size,
                                          <span class="nv">class_mode</span> <span class="o">=</span> <span class="s1">&#39;binary&#39;</span>,
                                                  <span class="nv">shuffle</span><span class="o">=</span>True,
                                                 <span class="nv">subset</span><span class="o">=</span><span class="s1">&#39;training&#39;</span><span class="o">)</span>
                                         
<span class="nv">test_dataset</span> <span class="o">=</span> train_datagen.flow_from_directory<span class="o">(</span><span class="s2">&#34;data/train&#34;</span>,
                                          <span class="nv">target_size</span><span class="o">=</span>target_size,
                                          <span class="nv">batch_size</span> <span class="o">=</span>batch_size,
                                          <span class="nv">class_mode</span> <span class="o">=</span> <span class="s1">&#39;binary&#39;</span>,
                                                <span class="nv">subset</span><span class="o">=</span><span class="s1">&#39;validation&#39;</span><span class="o">)</span>
</code></pre></div><p>So now I have the training and testing datasets separated as 80% and 20% of the whole data I have in my dataset. Now it&rsquo;s time to carry out training!</p>
<h4 id="model-selection-and-training">Model Selection and Training</h4>
<p>For the simplicity sake I&rsquo;ll use an existing model within Keras applications, but process will be similar in case you want to build your own model and trainup. You can find all the models that are available within keras applications and some sample useage of those in <a href="https://keras.io/api/applications/">here</a>. I&rsquo;ll be using VGG16 model in this example, why? well I think with the metrics provided in the Keras applications table and size of the model will be enough in our use case.</p>
<p>So we&rsquo;ll load up the model trained with imagenet weights using <code>tf.keras.applications.VGG16(include_top=False,weights=&quot;imagenet&quot;)</code> you can find more options in keras documentation which you can refer in <a href="https://keras.io/api/applications/vgg/#vgg16-function">here</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">from tensorflow.keras.models import Model
def make_model<span class="o">()</span>:
    <span class="nv">base_model</span> <span class="o">=</span> tf.keras.applications.VGG16<span class="o">(</span><span class="nv">include_top</span><span class="o">=</span>False,weights<span class="o">=</span><span class="s2">&#34;imagenet&#34;</span><span class="o">)</span>    
    <span class="nv">x</span> <span class="o">=</span> base_model.output

    <span class="c1"># add a global spatial average pooling layer</span>
    <span class="nv">x</span> <span class="o">=</span> keras.layers.GlobalAveragePooling2D<span class="o">()(</span>x<span class="o">)</span>
    <span class="nv">x</span> <span class="o">=</span> keras.layers.Dense<span class="o">(</span>1024,activation<span class="o">=</span><span class="s1">&#39;relu&#39;</span><span class="o">)(</span>x<span class="o">)</span>

    <span class="c1"># Consider only one class it&#39;ll be where it&#39;s cat or not (binary)</span>
    <span class="nv">predictions</span> <span class="o">=</span> keras.layers.Dense<span class="o">(</span>1,activation<span class="o">=</span><span class="s1">&#39;sigmoid&#39;</span><span class="o">)(</span>x<span class="o">)</span>
    <span class="nv">model</span> <span class="o">=</span> Model<span class="o">(</span><span class="nv">inputs</span><span class="o">=</span>base_model.input, <span class="nv">outputs</span><span class="o">=</span>predictions<span class="o">)</span>
    <span class="k">return</span> model
<span class="nv">model</span> <span class="o">=</span> make_model<span class="o">()</span>
</code></pre></div><p>Then we can compile the model selecting <code>binary_crossentropy</code> as the loss and with <code>rmsprop</code> where these you can select according to your requirements.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">model.compile<span class="o">(</span><span class="nv">optimizer</span><span class="o">=</span><span class="s1">&#39;rmsprop&#39;</span>,loss<span class="o">=</span><span class="s1">&#39;binary_crossentropy&#39;</span>,metrics<span class="o">=[</span><span class="s1">&#39;accuracy&#39;</span><span class="o">])</span>
</code></pre></div><p>Here we add few options to stop model training of the model if it has reached a certain accuracy level as well as to reduce the learning rate based on the validation accuracy.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">earlystop</span> <span class="o">=</span> EarlyStopping<span class="o">(</span><span class="nv">monitor</span><span class="o">=</span><span class="s1">&#39;val_loss&#39;</span>,patience<span class="o">=</span>10,verbose<span class="o">=</span>1<span class="o">)</span>
<span class="nv">learning_reduce</span> <span class="o">=</span> ReduceLROnPlateau<span class="o">(</span><span class="nv">patience</span><span class="o">=</span>3,monitor<span class="o">=</span><span class="s2">&#34;val_accuracy&#34;</span>,verbose<span class="o">=</span>1,min_lr<span class="o">=</span>0.000001,factor<span class="o">=</span>0.5<span class="o">)</span>
<span class="nv">callbacks</span> <span class="o">=</span> <span class="o">[</span>earlystop,learning_reduce<span class="o">]</span>
</code></pre></div><p>Then carryout training,</p>
<ul>
<li>steps per epoch / validation steps =&gt; How many batch samples to use in a single epoch</li>
<li>epochs =&gt; No of training cycles</li>
<li>validation data =&gt; validation data seperated from all the data in earlier step.</li>
<li>callbacks =&gt; Objects to execute different functionlities inside training cycles (Here to stop training early and reduce learning rate.)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">model.fit<span class="o">(</span>train_dataset,
         <span class="nv">steps_per_epoch</span> <span class="o">=</span> int<span class="o">(</span>training_samples<span class="o">)</span>//batch_size,
        <span class="nv">validation_steps</span> <span class="o">=</span> int<span class="o">(</span>validation_samples<span class="o">)</span>//batch_size,
         <span class="nv">epochs</span> <span class="o">=</span> 200,
         <span class="nv">validation_data</span> <span class="o">=</span> test_dataset,
          <span class="nv">callbacks</span> <span class="o">=</span> callbacks
         <span class="o">)</span>
model.save<span class="o">(</span>model_name<span class="o">)</span>
</code></pre></div><p>Here you can use both <code>.h5 (HDF5)</code> format as well as <code>tensorflow SavedModel</code> format, but as for h5 format i came across problems in sagemaker deployment where eventhough the model was deployed to Sagemaker <a href="https://stackoverflow.com/questions/68598991/keras-predictions-and-sagemaker-predictions-are-different/68612607#68612607">endpoint trained weights were&rsquo;t reflected on the endpoint</a>. So I recommand to stick on to <code>tensorflow SavedModel</code> format.</p>
<h2 id="loading-model">Loading Model</h2>
<p>Load up the trained model giving the path where the saved model is stored in.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Load models from tensorflow saved model format</span>
<span class="nv">model</span> <span class="o">=</span> keras.models.load_model<span class="o">(</span>saved_model_name<span class="o">)</span>
</code></pre></div><p>convert Tensorflow model to the format(<code>TF protobuf format</code>)  ready to be deployed in Sagemaker.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">def convert_to_aws<span class="o">(</span>loaded_model<span class="o">)</span>:
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    given a pre-trained keras model, this function converts it to a TF protobuf format
</span><span class="s2">    and saves it in the file structure which aws expects
</span><span class="s2">    &#34;&#34;&#34;</span>  
    from tensorflow.python.saved_model import builder
    from tensorflow.python.saved_model.signature_def_utils import predict_signature_def
    from tensorflow.python.saved_model import tag_constants
    import tensorflow as tf
    import os
    import shutil
    <span class="k">if</span> tf.executing_eagerly<span class="o">()</span>:
       tf.compat.v1.disable_eager_execution<span class="o">()</span>
    <span class="nv">dirpath</span> <span class="o">=</span> <span class="s1">&#39;export&#39;</span>
    <span class="k">if</span> os.path.exists<span class="o">(</span>dirpath<span class="o">)</span> and os.path.isdir<span class="o">(</span>dirpath<span class="o">)</span>:
        shutil.rmtree<span class="o">(</span>dirpath<span class="o">)</span>
    
    <span class="c1"># This is the file structure which AWS expects. Cannot be changed. </span>
    <span class="nv">model_version</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span>
    <span class="nv">export_dir</span> <span class="o">=</span> <span class="s1">&#39;export/Servo/&#39;</span> + model_version
    
    <span class="c1"># Build the Protocol Buffer SavedModel at &#39;export_dir&#39;</span>
    <span class="nv">builder</span> <span class="o">=</span> builder.SavedModelBuilder<span class="o">(</span>export_dir<span class="o">)</span>
    
    <span class="c1"># Create prediction signature to be used by TensorFlow Serving Predict API</span>
    <span class="nv">signature</span> <span class="o">=</span> predict_signature_def<span class="o">(</span>
        <span class="nv">inputs</span><span class="o">={</span><span class="s2">&#34;inputs&#34;</span>: loaded_model.input<span class="o">}</span>, <span class="nv">outputs</span><span class="o">={</span><span class="s2">&#34;score&#34;</span>: loaded_model.output<span class="o">})</span>
    
    <span class="nv">session</span> <span class="o">=</span> tf.compat.v1.Session<span class="o">()</span>
    <span class="nv">init_op</span> <span class="o">=</span> tf.compat.v1.global_variables_initializer<span class="o">()</span>
    session.run<span class="o">(</span>init_op<span class="o">)</span>
    <span class="c1"># Save the meta graph and variables</span>
    builder.add_meta_graph_and_variables<span class="o">(</span>
        <span class="nv">sess</span><span class="o">=</span>session, <span class="nv">tags</span><span class="o">=[</span>tag_constants.SERVING<span class="o">]</span>, <span class="nv">signature_def_map</span><span class="o">={</span><span class="s2">&#34;serving_default&#34;</span>: signature<span class="o">})</span>
    builder.save<span class="o">()</span> 
    
    <span class="c1">#create a tarball/tar file and zip it</span>
    import tarfile
    with tarfile.open<span class="o">(</span><span class="s1">&#39;model_deploy.tar.gz&#39;</span>, <span class="nv">mode</span><span class="o">=</span><span class="s1">&#39;w:gz&#39;</span><span class="o">)</span> as archive:
        archive.add<span class="o">(</span><span class="s1">&#39;export&#39;</span>, <span class="nv">recursive</span><span class="o">=</span>True<span class="o">)</span>
        
convert_to_aws<span class="o">(</span>model<span class="o">)</span>
</code></pre></div><p>Upload converted model to AWS bucket.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">import sagemaker

<span class="nv">sagemaker_session</span> <span class="o">=</span> sagemaker.Session<span class="o">()</span>
<span class="nv">inputs</span> <span class="o">=</span> sagemaker_session.upload_data<span class="o">(</span><span class="nv">path</span><span class="o">=</span><span class="s1">&#39;model_deploy.tar.gz&#39;</span>, <span class="nv">key_prefix</span><span class="o">=</span><span class="s1">&#39;model&#39;</span><span class="o">)</span>

<span class="c1"># View details of the uploaded bucket</span>
print<span class="o">(</span>f<span class="s2">&#34;Bucket name is: {sagemaker_session.default_bucket()}&#34;</span><span class="o">)</span>
</code></pre></div><p>Make a Sagemaker Model. (This is what Sagemaker endpoint will use to run inference on)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">!touch train.py <span class="c1">#create an empty python file</span>
import boto3, re
import tensorflow as tf
from sagemaker import get_execution_role

<span class="c1"># the (default) IAM role you created when creating this notebook</span>
<span class="nv">role</span> <span class="o">=</span> get_execution_role<span class="o">()</span>

<span class="c1"># Create a Sagemaker model (see AWS console&gt;SageMaker&gt;Models)</span>
from sagemaker.tensorflow.model import TensorFlowModel
<span class="nv">sagemaker_model</span> <span class="o">=</span> TensorFlowModel<span class="o">(</span><span class="nv">model_data</span> <span class="o">=</span> <span class="s1">&#39;s3://&#39;</span> + sagemaker_session.default_bucket<span class="o">()</span> + <span class="s1">&#39;/model/model_deploy.tar.gz&#39;</span>,
                                  <span class="nv">role</span> <span class="o">=</span> role,
                                  <span class="nv">framework_version</span> <span class="o">=</span> tf.__version__,
                                  <span class="nv">entry_point</span> <span class="o">=</span> <span class="s1">&#39;train.py&#39;</span><span class="o">)</span>
</code></pre></div><h2 id="deploy-the-model">Deploy the model</h2>
<p>Here an endpoint will be deployed connected to sagemaker model made in earlier steps.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">deployement_instance_type</span> <span class="o">=</span> <span class="s2">&#34;ml.m4.xlarge&#34;</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Deploy a SageMaker to an endpoint</span>
<span class="nv">predictor</span> <span class="o">=</span> sagemaker_model.deploy<span class="o">(</span><span class="nv">initial_instance_count</span><span class="o">=</span>1, <span class="nv">instance_type</span><span class="o">=</span>deployement_instance_type<span class="o">)</span>
<span class="nv">endpoint</span> <span class="o">=</span> predictor.endpoint

</code></pre></div><p>Here <code>endpoint</code> will be the name of the endpoint which you can get from AWS console as well.</p>
<h2 id="running-inference">Running Inference</h2>
<p>Time to run some testing on the deployed model. Here we can convert the image to a numpy array of correct shape to be sent into the final endpoint.</p>
<p>Note: <code> image = image.resize((224,224), Image.NEAREST)</code> by default keras preprocessing use nearest pixel from input image to do resizing where in Pillow library in default it use cubic interpolation on all pixels to resize image, inorder to keep both same use <code>Image.NEAREST</code> option in Pillow.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">import sagemaker
from sagemaker.tensorflow.model import TensorFlowModel
from PIL import Image
import tensorflow as tf
def _image_file_to_tensor<span class="o">(</span>image_file<span class="o">)</span>:
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    Reads an zlb image file and coverts it to a tensor (ndarray).
</span><span class="s2">
</span><span class="s2">    Converts zlb image to size and format necessary for inference using machine learning model.
</span><span class="s2">
</span><span class="s2">    Args:
</span><span class="s2">        image_file : Image file
</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="nv">image</span> <span class="o">=</span> Image.open<span class="o">(</span>image_file<span class="o">)</span>
    <span class="nv">image</span> <span class="o">=</span> image.resize<span class="o">((</span>224,224<span class="o">)</span>, Image.NEAREST<span class="o">)</span>
    <span class="nv">image</span> <span class="o">=</span> np.asarray<span class="o">(</span>image<span class="o">)</span>
    <span class="nv">image</span> <span class="o">=</span> np.expand_dims<span class="o">(</span>image, <span class="nv">axis</span><span class="o">=</span>0<span class="o">)</span>
    <span class="k">return</span> image


<span class="nv">predictor</span><span class="o">=</span>sagemaker.tensorflow.model.TensorFlowPredictor<span class="o">(</span>endpoint, sagemaker_session<span class="o">)</span>
<span class="c1"># .predict send the data to our endpoint</span>
<span class="nv">model</span> <span class="o">=</span> keras.models.load_model<span class="o">(</span>saved_model_name<span class="o">)</span>
<span class="nv">data</span> <span class="o">=</span> _image_file_to_tensor<span class="o">(</span><span class="s1">&#39;data/train/cat/nice_cat.jpg&#39;</span><span class="o">)</span> 
<span class="c1">#Sagemaker predictions</span>
print<span class="o">(</span>f<span class="s2">&#34;Predictions from Sagemaker {predictor.predict(data)}&#34;</span><span class="o">)</span>
<span class="c1">#actual keras Predictions</span>
print<span class="o">(</span>f<span class="s2">&#34;Predictions from Keras {model.predict(data)}&#34;</span><span class="o">)</span>
</code></pre></div><p>As for the results from both keras and sagemaker you should get exact same results. Enjoy!</p>
<h1 id="references">References</h1>
<ul>
<li><a href="https://aws.amazon.com/blogs/machine-learning/deploy-trained-keras-or-tensorflow-models-using-amazon-sagemaker/">Deploy trained Keras or TensorFlow models using Amazon SageMaker</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>USSD Handling for React Native</title>
			<link>https://arcslash.com/posts/2020-06-02-react-native-ussd/</link>
			<pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
			
			<guid>https://arcslash.com/posts/2020-06-02-react-native-ussd/</guid>
			<description>react-native-ussd library usage and development</description>
			<content type="html"><![CDATA[<p>I was in this current project recently which required functionality to to dial USSD codes to recharge/check balance as well as query telecom provider
for some data, but react native doesn&rsquo;t have a library by default to access ussd functions.<a href="https://www.npmjs.com/package/react-native-ussd">react-native-ussd</a> is a library to address react native based ussd calls and listeners</p>
<p>Unfortunately I couldn&rsquo;t find a way to read up USSD responses in IOS so the current solution will only be limited to android at this time.Although IOS USSD dialling functions will be added in the future releases of the react-native-ussd. (If anyone like to contribute please let me know as well :) )</p>
<p>Basic Library use starts with adding user permissions to android manifest, which naturally need permission to make calls in order to continue</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;manifest&gt;</span>
<span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&#34;android.permission.CALL_PHONE&#34;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;application&gt;</span>
</code></pre></div><p>Then the Ussd module and ussdEventEmitter should be imported and event listener should be added either as a hook(in functional components) or in component mount in class based components</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">//Functional Components
</span><span class="c1"></span><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">Ussd</span><span class="p">,</span> <span class="p">{</span><span class="nx">ussdEventEmitter</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native-ussd&#39;</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Update the document title using the browser API
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">eventListener</span> <span class="o">=</span> <span class="nx">ussdEventEmitter</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s1">&#39;ussdEvent&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">ussdReply</span><span class="p">);</span>
   <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">//Class Based Components
</span><span class="c1"></span><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">Ussd</span><span class="p">,</span> <span class="p">{</span><span class="nx">ussdEventEmitter</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native-ussd&#39;</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
<span class="nx">componentDidMount</span><span class="p">(){</span>    
    <span class="k">this</span><span class="p">.</span><span class="nx">eventListener</span> <span class="o">=</span> <span class="nx">ussdEventEmitter</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s1">&#39;ussdEvent&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">balance</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Next the dialling can be done by dial method of Ussd module,Make sure to request for user permission at the runtime, better if this can be handled at app startup</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">//Functional Components
</span><span class="c1"></span><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">PermissionsAndroid</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">Ussd</span><span class="p">,</span> <span class="p">{</span><span class="nx">ussdEventEmitter</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native-ussd&#39;</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
<span class="kr">const</span> <span class="nx">dial</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;{</span>
    <span class="kd">let</span> <span class="nx">granted</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">PermissionsAndroid</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span>
      <span class="nx">PermissionsAndroid</span><span class="p">.</span><span class="nx">PERMISSIONS</span><span class="p">.</span><span class="nx">CALL_PHONE</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s1">&#39;title&#39;</span><span class="o">:</span> <span class="s1">&#39;I need to make some calls&#39;</span><span class="p">,</span>
        <span class="s1">&#39;message&#39;</span><span class="o">:</span> <span class="s1">&#39;Give me permission to make calls &#39;</span>
      <span class="p">}</span>
    <span class="p">)</span>
  
    <span class="k">if</span> <span class="p">(</span><span class="nx">granted</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&#34;CAN Make Calls&#34;</span> <span class="p">);</span>
      <span class="nx">Ussd</span><span class="p">.</span><span class="nx">dial</span><span class="p">(</span><span class="s1">&#39;*#456#&#39;</span><span class="p">);</span><span class="c1">//add your dilaing code instead of *#456#
</span><span class="c1"></span>    <span class="p">}</span> 
    <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&#34;CALL MAKING Permission Denied&#34;</span> <span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="c1">//Class Based Components
</span><span class="c1"></span><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">PermissionsAndroid</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native&#39;</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">Ussd</span><span class="p">,</span> <span class="p">{</span><span class="nx">ussdEventEmitter</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-native-ussd&#39;</span><span class="p">;</span>

<span class="kr">export</span> <span class="k">default</span> <span class="kr">class</span> <span class="nx">App</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
<span class="kr">async</span> <span class="nx">dial</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">granted</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">PermissionsAndroid</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span>
      <span class="nx">PermissionsAndroid</span><span class="p">.</span><span class="nx">PERMISSIONS</span><span class="p">.</span><span class="nx">CALL_PHONE</span><span class="p">,</span>
      <span class="p">{</span>
        <span class="s1">&#39;title&#39;</span><span class="o">:</span> <span class="s1">&#39;I need to make some calls&#39;</span><span class="p">,</span>
        <span class="s1">&#39;message&#39;</span><span class="o">:</span> <span class="s1">&#39;Give me permission to make calls &#39;</span>
      <span class="p">}</span>
    <span class="p">)</span>
  
    <span class="k">if</span> <span class="p">(</span><span class="nx">granted</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&#34;CAN Make Calls&#34;</span> <span class="p">);</span>
      <span class="nx">Ussd</span><span class="p">.</span><span class="nx">dial</span><span class="p">(</span><span class="s1">&#39;*#456#&#39;</span><span class="p">);</span>
      
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">userBalance</span><span class="p">);</span>
    <span class="p">}</span> 
    <span class="k">else</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s2">&#34;CALL MAKING Permission Denied&#34;</span> <span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>And that&rsquo;s done it should get USSD responses printed out to console for the dials made using the Ussd.dial() function.</p>
]]></content>
		</item>
		
	</channel>
</rss>
